<?xml version="1.0" encoding="UTF-8"?>
<!-- 이 문서는 myBatis에서 처리할 SQL문을 작성하는 문서입니다. -->
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  DB의 컬럼명과 일치함!! -> 쿼리 작성 시 참고하려고 
	private int bo_no; //글번호
	private String bo_title; //글제목
	private String bo_content; //글내용
	private String bo_writer; //작성자
	private Date bo_date; //작성일
	private int bo_hit; //조회수

 -->

<!-- <mapper>태그의 namespace속성 값은 이 문서에 작성된 SQL문 호출할 때 같이 사용되는 이름 -->
<mapper namespace="board">

	<!-- 
		이 <mapper>태그 영역 안에는 처리할 SQL문에 맞는 태그를 사용해서 SQL문 작성
		
		*사용 가능한 태그들
		<select> select 구문 ~~~ </select>
		<insert> select 구문 ~~~ </insert>
		<update> select 구문 ~~~ </update>
		<delete> select 구문 ~~~ </delete>
		등등...
	 -->	
	 
	 <!-- 
	 	sql 디벨로퍼에서와는 다르게 이곳에서는 쿼리문 뒤에 ';'을 붙이지 않음!! 오류발생!!
	 
	  -->

	<!-- 
		*id 속성 : 실행할 SQL문이 작성된 태그를 Java 소스에서 호출할 때 사용되는 이름.
					<mapper>태그의 namespace 속성 값과 연결해서 사용
					예) "board.selectBoardList"
	 	*parameterType 속성 : 작성된 SQL문에 사용될 데이터가 들어있는 객체 정보를 기술
	 						(보통 VO 클래스, Java의 기본 자료형 이름, Map 객체 등이 사용)
	 						(VO클래스 등을 기술할 때는 해당 클래스의 패키지명을 포함한 전체 이름 기술)
	 						(이 속성에는 <typeAlias>태그에서 지정한 'alias속성값' 사용 가능)
	 						
	 	*parameterType속성에 설정되는 값이 단일 값이면 SQL문에 이 값을 나타내는 변수는
	 	특별히 정해지지 않음. (사용자가 임의 지정 가능)
	 	
	 	*resultType속성 : select문을 처리한 결과를 저장할 VO클래스나 java의 기본자료형, Map객체를 지정할 수 있다.
	 	
	 	**
	 	select문을 처리한 결과가 여러개의 레코드이면, java에서 selectList()메서드를 이용하여 호출.
	 	그러면 검색된 데이터들을 자동으로 List에 담아서 반환.
	 	그래서 결과가 여러개일 경우에도 resultType 속성에는 1개의 레코드가 저장될 클래스나 자료형 이름을 지정하면 됨.
	 	
	 	
	 	
	 						
	 
	 -->



	<!-- public List<BoardVO> selectBoardList(); -->
	<select id="selectBoardList" resultType="BoardVO">
		select * from board order by bo_no desc
	</select>

	<!-- public BoardVO selectBoardDetail(int boardNo) -->
	<select id="selectBoardDetail" parameterType="int" resultType="BoardVO">
		select * from board where bo_no = #{bo_no}
	</select>
	
	<!-- public int insertBoard(BoardVO boardVO) -->
	<insert id="insertBoard" parameterType="BoardVO">
		insert into board(bo_no, bo_title, bo_content, bo_writer, bo_date, bo_hit)
			values(seq_board.nextval, #{bo_title}, #{bo_content}, #{bo_writer}, sysdate, 0)	 
	</insert>
	
	<!-- public int updateBoard(BoardVO boardVO) -->
	<update id="updateBoard" parameterType="BoardVO">
		update board set bo_title = #{bo_title}, bo_content = #{bo_content},
			bo_writer = #{bo_writer}, bo_date = sysdate
			where bo_no = #{bo_no} 
	</update>
	
	<!-- public int deleteBoard(int boardNo) -->
	<delete id="deleteBoard" parameterType="int">
		delete from board where bo_no = #{bo_no}
	</delete>
	
	<!-- public int setCountHit(int boardNo) -->
	<update id="setCountHit" parameterType="int">
		update board set bo_hit = bo_hit + 1
			where bo_no = #{bo_no}
	</update>
	


</mapper>	











